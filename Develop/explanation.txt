Config Folder
  The purpose of the config folder is to store all the information we need to connect to the mysql database.

  The isAuthenticate.js file is there to ensure that routes only run if the user is logged in, else if they are not, it redirects them back to the homepage

  The config.json file houses all the login information we need to connect to three different databases specified for different stages of the app (development, test, and production). 

  The passport.js file is logic that does user login authentication. it first checks what the user enter is a valid email, and if it is, then checks if the password associated with the email is correct.

Models Folder
  The Models folder holds the files that act as templates for the MySQL tables when we run the server. These are similar to schemas.

  The index.js file in Models is used to consolidate all the models into one file and export them out. It also is useful in that programs target any file called index.js

  The user.js file is used to generate the users table in the mysql database. It is similar to a schema. On server startup, a users table is generated if it doesnt exist.

Public Folder
  The public folder houses any and all code that will be show in the front end and and logic used for front end

  login.js is the javascript code for the login.html webage. The logic in the file ensures that all the necessary information is there when a user is logged in and only allows the user to login with the correct email and password. This is where we call the our api, which in turns access the MySQL database and does user authenication.

  The member.js is the javascript code for the members.html file. It just does a GET call to get the user info and displays it on the page.

  signup.js is the javascript code for the signup.html page. This page is where users are directed to when they want to create a new account. This file does a POST call to create a new user in the database.

  The stylesheets folder houses our css code that is used to style the html pages. For this project, we brought in the Bootstrap styling library

Routes Folder
  The route folder contains all our CRUD calls to our MySQL database

  The api-routes.js holds the CRUD calls associated with creating a new user, getting a new user, and logging out a new user.

  The html-routes.js are all the routes associated with redircted the user between the login.html, members.html, and signup.html pages based on whether they are logged in or not

Package.Json File
  The Package.Json file holds all the information for the npms that are needed for this app. By running 'npm i' in the terminal will, it will make the app read this json file and download the npms needed. 

Server.js 
  The server.js file houses the data to connect our routes and models to a listening port. It is also where we enable our app to work with json data 